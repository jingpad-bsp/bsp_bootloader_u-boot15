# This helper makefile is used for creating
#  - symbolic links (arch/$ARCH/include/asm/arch
#  - include/autoconf.mk, {spl,tpl}/include/autoconf.mk
#  - include/config.h
#
# When our migration to Kconfig is done
# (= When we move all CONFIGs from header files to Kconfig)
# this makefile can be deleted.

__all: include/autoconf.mk include/autoconf.mk.dep

ifeq ($(shell grep -q '^CONFIG_SPL=y' include/config/auto.conf 2>/dev/null && echo y),y)
__all: spl/include/autoconf.mk
endif

ifeq ($(shell grep -q '^CONFIG_TPL=y' include/config/auto.conf 2>/dev/null && echo y),y)
__all: tpl/include/autoconf.mk
endif

include include/config/auto.conf

include scripts/Kbuild.include

# Need to define CC and CPP again here in case the top Makefile did not
# include config.mk.  Some architectures expect CROSS_COMPILE to be defined
# in arch/$(ARCH)/config.mk
CC		= $(CROSS_COMPILE)gcc
CPP		= $(CC) -E

include config.mk

UBOOTINCLUDE    := \
		-Iinclude \
		$(if $(KBUILD_SRC), -I$(srctree)/include) \
		-I$(srctree)/arch/$(ARCH)/include \
		-include $(srctree)/include/linux/kconfig.h

c_flags := $(KBUILD_CFLAGS) $(KBUILD_CPPFLAGS) $(PLATFORM_CPPFLAGS) \
					$(UBOOTINCLUDE) $(NOSTDINC_FLAGS)

quiet_cmd_autoconf_dep = GEN     $@
      cmd_autoconf_dep = $(CC) -x c -DDO_DEPS_ONLY -M -MP $(c_flags) \
	-MQ include/config/auto.conf $(srctree)/include/common.h > $@ || {	\
		rm $@; false;							\
	}
include/autoconf.mk.dep: FORCE
	$(call cmd,autoconf_dep)

# We are migrating from board headers to Kconfig little by little.
# In the interim, we use both of
#  - include/config/auto.conf (generated by Kconfig)
#  - include/autoconf.mk      (used in the U-Boot conventional configuration)
# The following rule creates autoconf.mk
# include/config/auto.conf is grepped in order to avoid duplication of the
# same CONFIG macros
quiet_cmd_autoconf = GEN     $@
      cmd_autoconf = \
	$(CPP) $(c_flags) $2 -DDO_DEPS_ONLY -dM $(srctree)/include/common.h > $@.tmp && { \
		sed -n -f $(srctree)/tools/scripts/define2mk.sed $@.tmp |		\
		while read line; do							\
			if [ -n "${KCONFIG_IGNORE_DUPLICATES}" ] ||			\
			   ! grep -q "$${line%=*}=" include/config/auto.conf; then	\
				echo "$$line";						\
			fi								\
		done > $@;								\
		rm $@.tmp;								\
	} || {										\
		rm $@.tmp; false;							\
	}

include/autoconf.mk: FORCE
	$(call cmd,autoconf)

spl/include/autoconf.mk: FORCE
	$(Q)mkdir -p $(dir $@)
	$(call cmd,autoconf,-DCONFIG_SPL_BUILD)

tpl/include/autoconf.mk: FORCE
	$(Q)mkdir -p $(dir $@)
	$(call cmd,autoconf,-DCONFIG_SPL_BUILD -DCONFIG_TPL_BUILD)

include/autoconf.mk include/autoconf.mk.dep \
	spl/include/autoconf.mk tpl/include/autoconf.mk: include/config.h

# include/config.h
# Prior to Kconfig, it was generated by mkconfig. Now it is created here.

#DO NOT MODIFY AUTO_ADAPTIVE_BOARD_LIST if you don't know what it is
#Add clock and rf band auto adaptive to specified board in AUTO_ADAPTIVE_BOARD_LIST

AUTO_ADAPTIVE_BOARD_LIST := "sp9850ka_2c30" "sp9850ka_2c10" "sp9863a_1h10_32b" "sp9850kh_1h10" \
"sp9820e_1h10" "sp9850e_1h10" "sp9863a_1h10" "sp9863a_2h10" "sp9850kh_2c20" "sp9820e_64b" "sp7731e_1h20" "sp9863a_3h10_32b" \
"sp7731e_1h10" "sp9850ka_2c20" "sp9850ka_1h10" "sp9863a_3h10" "sp9853i_1h10" "sp9832e_1h10_32b" \
"sp9820e_2h10" "sp9863a_tsg" "sp9832e_1h10"

NEED_AUTO_ADAPTIVE := $(filter $(CONFIG_SYS_CONFIG_NAME), $(AUTO_ADAPTIVE_BOARD_LIST))
export NEED_AUTO_ADAPTIVE

#DO NOT MODIFY RF_ADAPTIVE_BOARD_LIST if you don't know what it is
#Add rf band auto adaptive only to specified board in RF_ADAPTIVE_BOARD_LIST

RF_ADAPTIVE_BOARD_LIST := "ums312_1h10" "ums312_1h10_32b" "ums312_2h10_32b" "udx710_3h10" "ums512_1h10" "ums512_2h10" \
"sp9863a_3c10" "ud710_2h10" "ud710_10h10" "ud710_2c11" "ud710_7h10" "ud710_2h10u" "ud710_3h10u" "ud710_9h10u" "ud710_20c11"

NEED_RF_ADAPTIVE := $(filter $(CONFIG_SYS_CONFIG_NAME), $(RF_ADAPTIVE_BOARD_LIST))
export NEED_RF_ADAPTIVE

BATID_ADAPTIVE_BOARD_LIST := "ud710_7h10" "ud710_2h10u" "ud710_3h10u"

NEED_BATID_ADAPTIVE := $(filter $(CONFIG_SYS_CONFIG_NAME), $(BATID_ADAPTIVE_BOARD_LIST))
export NEED_BATID_ADAPTIVE

LCMID_ADAPTIVE_BOARD_LIST := "ud710_7h10"

NEED_LCMID_ADAPTIVE := $(filter $(CONFIG_SYS_CONFIG_NAME), $(LCMID_ADAPTIVE_BOARD_LIST))
export NEED_LCMID_ADAPTIVE

HW_VERSION_ADAPTIVE_BOARD_LIST := "ud710_9h10u"

NEED_HW_VERSION_ADAPTIVE := $(filter $(CONFIG_SYS_CONFIG_NAME), $(HW_VERSION_ADAPTIVE_BOARD_LIST))
export NEED_HW_VERSION_ADAPTIVE

WCN_SEL_ADAPTIVE_BOARD_LIST := "ud710_9h10u"

NEED_WCN_SEL_ADAPTIVE := $(filter $(CONFIG_SYS_CONFIG_NAME), $(WCN_SEL_ADAPTIVE_BOARD_LIST))
export NEED_WCN_SEL_ADAPTIVE

WCN_ADAPTIVE_BOARD_LIST := "ums512_1h10" "ums512_2h10" "ums512_20c10"

NEED_WCN_ADAPTIVE := $(filter $(CONFIG_SYS_CONFIG_NAME), $(WCN_ADAPTIVE_BOARD_LIST))
export NEED_WCN_ADAPTIVE

define filechk_config_h
	(echo "/* Automatically generated - do not edit */";		\
	for i in $$(echo $(CONFIG_SYS_EXTRA_OPTIONS) | sed 's/,/ /g'); do \
		echo \#define CONFIG_$$i				\
		| sed '/=/ {s/=/	/;q; } ; { s/$$/	1/; }'; \
	done;								\
	echo \#define CONFIG_BOARDDIR board/$(if $(VENDOR),$(VENDOR)/)$(BOARD);\
	if [ $(NEED_AUTO_ADAPTIVE) ]; then \
		echo "/* Add clock and rf auto adaptive to $(NEED_AUTO_ADAPTIVE) */";		\
		echo \#define CONFIG_BOARD_ID;		\
	fi;	\
	if [ $(NEED_RF_ADAPTIVE) ]; then \
		echo "/* Add rf auto adaptive to $(NEED_RF_ADAPTIVE) */";		\
		echo \#define CONFIG_BAND_DETECT;		\
	fi;	\
	if [ $(NEED_BATID_ADAPTIVE) ]; then \
		echo "/* Add bat id adaptive to $(NEED_BATID_ADAPTIVE) */";		\
		echo \#define CONFIG_BAT_ID;		\
	fi;	\
	if [ $(NEED_LCMID_ADAPTIVE) ]; then \
		echo "/* Add lcm id adaptive to $(NEED_LCM_ADAPTIVE) */";		\
		echo \#define CONFIG_LCM_ID;		\
	fi;	\
	if [ $(NEED_HW_VERSION_ADAPTIVE) ]; then \
		echo "/* Add hw version adaptive to $(NEED_HW_VERSION_ADAPTIVE) */";		\
		echo \#define CONFIG_HW_VERSION;		\
	fi;	\
	if [ $(NEED_WCN_SEL_ADAPTIVE) ]; then \
		echo "/* Add wcn sel adaptive to $(NEED_WCN_SEL_ADAPTIVE) */";		\
		echo \#define CONFIG_WCN_SEL;		\
	fi;	\
	if [ $(NEED_WCN_ADAPTIVE) ]; then \
		echo "/* Add wcn auto adaptive to $(NEED_WCN_ADAPTIVE) */";		\
		echo \#define CONFIG_WCN_DETECT;		\
	fi;	\
	echo \#include \<config_defaults.h\>;				\
	echo \#include \<config_uncmd_spl.h\>;				\
	echo \#include \<configs/$(CONFIG_SYS_CONFIG_NAME).h\>;		\
	echo \#include \<asm/config.h\>;				\
	echo \#include \<config_fallbacks.h\>;)
endef

include/config.h: scripts/Makefile.autoconf create_symlink FORCE
	$(call filechk,config_h)

# symbolic links
# If arch/$(ARCH)/mach-$(SOC)/include/mach exists,
# make a symbolic link to that directory.
# Otherwise, create a symbolic link to arch/$(ARCH)/include/asm/arch-$(SOC).
PHONY += create_symlink
create_symlink:
ifneq ($(KBUILD_SRC),)
	$(Q)mkdir -p include/asm
	$(Q)if [ -d $(KBUILD_SRC)/arch/$(ARCH)/mach-$(SOC)/include/mach ]; then	\
		dest=arch/$(ARCH)/mach-$(SOC)/include/mach;			\
	else									\
		dest=arch/$(ARCH)/include/asm/arch-$(if $(SOC),$(SOC),$(CPU));	\
	fi;									\
	ln -fsn $(KBUILD_SRC)/$$dest include/asm/arch
else
	$(Q)if [ -d arch/$(ARCH)/mach-$(SOC)/include/mach ]; then	\
		dest=../../mach-$(SOC)/include/mach;			\
	else								\
		dest=arch-$(if $(SOC),$(SOC),$(CPU));			\
	fi;								\
	ln -fsn $$dest arch/$(ARCH)/include/asm/arch
endif

PHONY += FORCE
FORCE:

.PHONY: $(PHONY)
